# Include all of the repositories which you want this pipeline to scan for files to sign, make sure you also check them out in the jobs step checkout.
resources:
  repositories:
    - repository: Utilities
      type: github
      endpoint: patrykpodlas
      name: patrykpodlas/Utilities
    - repository: Azure
      type: github
      endpoint: patrykpodlas
      name: patrykpodlas/Azure
    - repository: VMware
      type: github
      endpoint: patrykpodlas
      name: patrykpodlas/VMware

  webhooks:
    - webhook: MyTrigger
      connection: Trigger-Utilities
      filters:
        - path: action
          value: closed

trigger:
  branches:
    include:
    - main # Trigger only on the main branch.
    - feature-duplicate-files
  paths:
    include:
    - '*' # Include all files within the repository.

pr: none # Do not trigger on PR, this is taken care of by the CI trigger.

variables:
  - group: Code Signing # This must include all the secrets, do not store the certificate in secure files, instead link the variable group to the Azure key vault and retrieve the secrets as well as the certificate from there.

jobs:
  - job: code_signing
    pool:
      name: vSphere
      vmImage: windows-latest # For this pipeline, this agent can be an online agent as it does not connect to any on-premises resources.
    steps:
      - checkout: self
      - checkout: Azure
      - checkout: VMware

      - task: AzurePowerShell@5
        displayName: Retrieve a list of existing signed files
        inputs:
          azureSubscription: 'Code-Signing'
          ScriptType: 'FilePath'
          ScriptPath: '$(Build.Repository.LocalPath)\Utilities\code-signing\get-list-of-signed-files.ps1'
          ScriptArguments: >
            -StorageAccountResourceGroupName $(storage-account-resource-group-name)
            -StorageAccount $(storage-account)
            -DestinationContainer $(destination-container)
          azurePowerShellVersion: 'LatestVersion'
          workingDirectory: '$(Build.StagingDirectory)'

      - task: PowerShell@2 # Scans the files in each repository, and then signs them. Note: Set-AuthenticodeSignature is not supported on non-Windows endpoints.
        displayName: Signing files in each repository
        inputs:
          targetType: filePath
          filePath: '$(Build.Repository.LocalPath)\Utilities\code-signing\sign-files.ps1'
          arguments: >
            -CodeSigningCertificate $(code-signing-certificate)

      - task: AzurePowerShell@5
        displayName: Upload signed files to blob along with SHA256 metadata
        condition: and(succeeded(), eq(variables['Success'], 'true'))
        inputs:
          azureSubscription: 'Code-Signing'
          ScriptType: 'FilePath'
          ScriptPath: '$(Build.Repository.LocalPath)\Utilities\code-signing\upload-files-to-blob.ps1'
          ScriptArguments: >
            -StorageAccountResourceGroupName $(storage-account-resource-group-name)
            -StorageAccount $(storage-account)
            -DestinationContainer $(destination-container)
          azurePowerShellVersion: 'LatestVersion'
          workingDirectory: '$(Build.StagingDirectory)'

      - task: DeleteFiles@1 # Cleaning up the stating directory.
        displayName: Deleting files in staging directory
        condition: and(succeeded(), eq(variables['Success'], 'true'))
        inputs:
          SourceFolder: '$(Build.StagingDirectory)'
          Contents: '**'
          Recursive: true