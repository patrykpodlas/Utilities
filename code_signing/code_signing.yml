# Include all of the repositories which you want this pipeline to scan for files to sign, make sure you also check them out in the jobs step checkout.
resources:
  repositories:
    - repository: Utilities
      type: github
      endpoint: patrykpodlas
      name: patrykpodlas/Utilities
    - repository: Azure
      type: github
      endpoint: patrykpodlas
      name: patrykpodlas/Azure

  webhooks:
    - webhook: MyTrigger
      connection: Trigger-Utilities
      filters:
        - path: action
          value: closed

trigger:
  branches:
    include:
    - main # Trigger only on the main branch.
    - improve-readability
  paths:
    include:
    - '*' # Include all files within the repository.

pr: none # Do not trigger on PR, this is taken care of by the CI trigger.

variables:
  - group: Code Signing # This must include all the secrets, do not store the certificate in secure files, instead link the variable group to the Azure key vault and retrieve the secrets as well as the certificate from there.

jobs:
  - job: code_signing
    pool:
      name: vSphere # For this pipeline, this agent can be an online agent as it does not connect to any on-premises resources.
    steps:
      - checkout: self
      - checkout: Azure
      - task: AzureCLI@2 # Connects to the storage account and retrieves the existing signed files in the container, exports the list to a variable which is then used in the next task.
        displayName: Retrieve a list of existing signed files
        inputs:
          azureSubscription: 'Code-Signing'
          workingDirectory: '$(Build.StagingDirectory)'
          addSpnToEnvironment: true
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.Repository.LocalPath)\Utilities\code_signing\get-list-of-signed-files.ps1'
          scriptType: 'ps'
          arguments: >
            -ServicePrincipalSecret $(service-principal-secret)
            -StorageAccountResourceGroupName $(storage-account-resource-group-name)
            -StorageAccount $(storage-account)
            -DestinationContainer $(destination-container)

      - task: PowerShell@2 # Scans the files in each repository, and then signs them. Note: Set-AuthenticodeSignature is not supported on non-Windows endpoints.
        displayName: Signing files in each repository
        inputs:
          targetType: filePath
          filePath: '$(Build.Repository.LocalPath)\Utilities\code_signing\sign-files.ps1'
          arguments: >
            -CodeSigningCertificate $(code-signing-certificate)

      - task: AzureCLI@2
        displayName: Upload the files to blob storage along with the SHA256 metadata
        condition: and(succeeded(), eq(variables['Success'], 'true'))
        inputs:
          azureSubscription: 'Code-Signing'
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          workingDirectory: '$(Build.StagingDirectory)'
          addSpnToEnvironment: true
          inlineScript: |
            $NewFilesAndTheirHashes = '$(NewFilesAndTheirHashesJson)' | ConvertFrom-Json
            Write-Output "--- Logging into storage account."
            $SecurePassword = ConvertTo-SecureString -String $(service-principal-secret) -AsPlainText -Force
            $PSCredential = New-Object System.Management.Automation.PSCredential($env:ServicePrincipalID, $SecurePassword)
            Connect-AzAccount -ServicePrincipal -Credential $PSCredential -Tenant $env:TenantID
            Write-Output "--- Logged into Azure."
            $Context = $(Get-AzStorageAccount -ResourceGroupName $(storage-account-resource-group-name) -Name $(storage-account)).Context
            # Set the hashes
            foreach ($File in $NewFilesAndTheirHashes) {
                $Metadata = @{
                    SHA256 = $File.SHA256
                }
                Write-Output "--- Uploading file: $($File.Name) and setting metadata with hash: $($File.SHA256)."
                Set-AzStorageBlobContent -Container $(destination-container) -File $File.Name -Metadata $Metadata -Force -Context $Context | Out-Null
                Write-Output "--- Blob uploaded."
            }

      - task: DeleteFiles@1 # Cleaning up the stating directory.
        displayName: Deleting files in staging directory
        condition: and(succeeded(), eq(variables['Success'], 'true'))
        inputs:
          SourceFolder: '$(Build.StagingDirectory)'
          Contents: '**'
          Recursive: true