resources:
  repositories:
    - repository: Utilities
      type: github
      endpoint: patrykpodlas
      name: patrykpodlas/Utilities

pr: none
trigger: none

variables:
  - group: Code Signing

jobs:
  - job: code_signing
    pool:
      name: vSphere
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $Files = Get-ChildItem -Path "$(Build.Repository.LocalPath)" -Include '*.ps1' -Recurse | ForEach-Object {
                $FileContent = Get-Content $_ -ErrorAction Ignore
                if ($FileContent | Select-String -Pattern '#sign-me') {
                    $HasBeginBlock = $FileContent | Select-String -Pattern '# SIG # Begin signature block'
                    $HasEndBlock = $FileContent | Select-String -Pattern '# SIG # End signature block'
                    if (-not ($HasBeginBlock -and $HasEndBlock)) {
                        Write-Output $_
                    }
                }
            }
            if ($Files) {
                Write-Output "--- Creating the code signing certificate from Azure Key Vault."
                New-Item "$(Build.StagingDirectory)\code_signing_certificate.pfx" -Value $(code-signing) | Out-Null
                if (Get-Item -Path "$(Build.StagingDirectory)\code_signing_certificate.pfx") {
                    Write-Output "--- Successfully created the code signing certificate."
                }

                Write-Output "--- Importing the code signing certificate."
                $Certificate = Import-PfxCertificate -CertStoreLocation Cert:\CurrentUser\My -FilePath "$(Build.StagingDirectory)\code_signing_certificate.pfx"

                Write-Output "--- Files to sign:"
                foreach ($File in $Files) {
                    Write-Output $File.Name
                }
                foreach ($File in $Files) {
                    Write-Output "--- Signing: $($File.Name)"
                    $CopiedFile = Copy-Item -Path $File -Destination $(Build.StagingDirectory) -PassThru | Select-Object -ExpandProperty FullName
                    Set-AuthenticodeSignature -Certificate $Certificate -FilePath $CopiedFile -TimestampServer "http://timestamp.sectigo.com" -PassThru | Select-Object *
                }

                Write-Output "--- Removing the certificate from the certificate store"
                Write-Output "--- Looking for certificate with thumbprint: $($Certificate.Thumbprint)"
                Get-ChildItem -Path Cert:\CurrentUser\My\$Certificate.Thumbprint | Remove-Item
                Write-Output "--- Certificate removed from store."

                echo "##vso[task.setvariable variable=Files;isOutput=true]true"

            } elseif (!$Files) {
                Write-Output "--- Nothing to sign."
                echo "##vso[task.setvariable variable=Files;isOutput=true]false"
            }

      - task: AzureFileCopy@5
        inputs:
          Destination: 'AzureBlob'
          azureSubscription: 'Code Signing'
          SourcePath: $(source-directory)
          storage: $(storage-account)
          ContainerName: $(destination-container)
        condition: and(succeeded(), eq(variables['Files'], 'true'))

      - task: DeleteFiles@1
        inputs:
          SourceFolder: '$(Build.StagingDirectory)'
          Contents: '**'
          Recursive: true
        condition: and(succeeded(), eq(variables['Files'], 'true'))